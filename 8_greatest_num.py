import unittest

from typing import List

from tasks.utils import count_time

LENGTH = 13
GREAT_NUMBER = ("731671765313306249192251196744265747423553491949349698352031277450632623957831801698"
                "480186947885184385861560789112949495459501737958331952853208805511125406987471585238"
                "630507156932909632952274430435576689664895044524452316173185640309871112172238311362"
                "229893423380308135336276614282806444486645238749303589072962904915604407723907138105"
                "158593079608667017242712188399879790879227492190169972088809377665727333001053367881"
                "220235421809751254540594752243525849077116705560136048395864467063244157221553975369"
                "781797784617406495514929086256932197846862248283972241375657056057490261407972968652"
                "414535100474821663704844031998900088952434506585412275886668811642717147992444292823"
                "086346567481391912316282458617866458359124566529476545682848912883142607690042242190"
                "226710556263211111093705442175069416589604080719840385096245544436298123098787992724"
                "428490918884580156166097919133875499200524063689912560717606058861164671094050775410"
                "0225698315520005593572972571636269561882670428252483600823257530420752963450")


def calc_product(num: str) -> int:
    if len(num) == 1:
        return int(num)
    return int(num[0]) * int(calc_product(num[1:]))


def get_largest_series(series: str, length: int) -> List[str]:
    left_border = 0
    series_length = len(series)
    while left_border < series_length:
        right_border = left_border + length
        if right_border > series_length:
            break

        seq = series[left_border:right_border]

        zero = '0'
        if zero in seq:
            # '11201234' if we find 4 adjacent nums in series we can skip sequences with zero: 1120, 2301, 2012 and etc
            left_border += seq.index(zero) + 1
            continue

        left_border += 1
        yield seq


class Test8Task(unittest.TestCase):
    def test_get_largest_product(self):
        data = [
            # series, num, res
            ('1234', 2, ['12', '23', '34']),
            ('12034', 2, ['12', '34']),
            (GREAT_NUMBER, 13, ['7316717653133', '6249192251196', '2491922511967', '4919225119674', '9192251196744', '1922511967442', '9225119674426', '2251196744265', '2511967442657', '5119674426574', '1196744265747', '1967442657474', '9674426574742', '6744265747423', '7442657474235', '4426574742355', '4265747423553', '2657474235534', '6574742355349', '5747423553491', '7474235534919', '4742355349194', '7423553491949', '4235534919493', '2355349194934', '3553491949349', '5534919493496', '5349194934969', '3491949349698', '4919493496983', '9194934969835', '1949349698352', '6326239578318', '1869478851843', '8694788518438', '6947885184385', '9478851843858', '4788518438586', '7885184385861', '8851843858615', '8518438586156', '7891129494954', '8911294949545', '9112949495459', '1129494954595', '1737958331952', '7379583319528', '3795833195285', '7958331952853', '9583319528532', '6987471585238', '9874715852386', '8747158523863', '4355766896648', '3557668966489', '5576689664895', '4452445231617', '4524452316173', '5244523161731', '2445231617318', '4452316173185', '4523161731856', '5231617318564', '9871112172238', '8711121722383', '7111217223831', '1112172238311', '1121722383113', '1217223831136', '2172238311362', '1722383113622', '7223831136222', '2238311362229', '2383113622298', '3831136222989', '8311362229893', '3113622298934', '1136222989342', '1362229893423', '3622298934233', '6222989342338', '8135336276614', '1353362766142', '3533627661428', '5336276614282', '3362766142828', '6444486645238', '4444866452387', '4448664523874', '4486645238749', '4866452387493', '1724271218839', '7242712188399', '2427121883998', '4271218839987', '2712188399879', '7121883998797', '1218839987979', '9377665727333', '5947522435258', '9475224352584', '4752243525849', '6324415722155', '3244157221553', '2441572215539', '4415722155397', '4157221553975', '1572215539753', '5722155397536', '7221553975369', '2215539753697', '2155397536978', '1553975369781', '5539753697817', '5397536978179', '3975369781797', '9753697817977', '7536978179778', '5369781797784', '3697817977846', '6978179778461', '9781797784617', '7817977846174', '8625693219784', '6256932197846', '2569321978468', '5693219784686', '6932197846862', '9321978468622', '3219784686224', '2197846862248', '1978468622482', '9784686224828', '7846862248283', '8468622482839', '4686224828397', '6862248283972', '8622482839722', '6224828397224', '2248283972241', '2482839722413', '4828397224137', '8283972241375', '2839722413756', '8397224137565', '3972241375657', '7972968652414', '9729686524145', '7296865241453', '2968652414535', '9686524145351', '6585412275886', '5854122758866', '8541227588666', '5412275886668', '4122758866688', '1227588666881', '2275886668811', '2758866688116', '7588666881164', '5886668811642', '8866688116427', '8666881164271', '6668811642717', '6688116427171', '6881164271714', '8811642717147', '8116427171479', '1164271714799', '1642717147992', '6427171479924', '4271714799244', '2717147992444', '7171479924442', '1714799244429', '7147992444292', '1479924442928', '4799244429282', '7992444292823', '8634656748139', '6346567481391', '3465674813919', '4656748139191', '6567481391912', '5674813919123', '6748139191231', '7481391912316', '4813919123162', '8139191231628', '1391912316282', '3919123162824', '9191231628245', '1912316282458', '9123162824586', '1231628245861', '2316282458617', '3162824586178', '1628245861786', '6282458617866', '2824586178664', '8245861786645', '2458617866458', '4586178664583', '5861786645835', '8617866458359', '6178664583591', '1786645835912', '7866458359124', '8664583591245', '6645835912456', '6458359124566', '4583591245665', '5835912456652', '8359124566529', '3591245665294', '5912456652947', '9124566529476', '1245665294765', '2456652947654', '4566529476545', '5665294765456', '6652947654568', '6529476545682', '5294765456828', '2947654568284', '9476545682848', '4765456828489', '7654568284891', '6545682848912', '5456828489128', '4568284891288', '5682848912883', '6828489128831', '8284891288314', '2848912883142', '8489128831426', '9624554443629', '6245544436298', '2455444362981', '4554443629812', '5544436298123', '9878799272442', '8787992724428', '7879927244284', '8799272442849', '9791913387549', '7919133875499', '9191338754992', '5593572972571', '5935729725716', '9357297257163', '3572972571636', '5729725716362', '7297257163626', '2972571636269', '9725716362695', '7257163626956', '2571636269561', '5716362695618', '7163626956188', '1636269561882', '6362695618826', '3626956188267']),
        ]
        for series, num, res in data:
            largest_series = list(get_largest_series(series, num))
            print(largest_series)
            self.assertEqual(largest_series, res)

    def test_calc_product(self):
        data = [
            # num, result
            ('33', 9),
            ('123', 6),
            ('9989', 5832),
        ]
        for num, res in data:
            with self.subTest(num=num):
                self.assertEqual(calc_product(num), res)


@count_time
def get_largest_seq():
    res = {calc_product(seq): seq for seq in get_largest_series(GREAT_NUMBER, LENGTH)}
    key = sorted(res, reverse=True)[0]
    return print(f'Product is {key} and {res[key]}')

get_largest_seq()

# if __name__ == '__main__':
#     unittest.main()
